# generated by some llm
from flask import Flask, request, redirect, session, url_for, render_template_string
import requests
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)  # For session management

# Simple HTML form for user to enter their instance
INSTANCE_FORM = """
    <h2>Sign up with Mastodon</h2>
    <form action="/start" method="post">
        Mastodon instance (e.g. mastodon.social):<br>
        <input type="text" name="instance" required>
        <input type="submit" value="Continue">
    </form>
"""

@app.route('/')
def index():
    return render_template_string(INSTANCE_FORM)

@app.route('/start', methods=['POST'])
def start():
    instance = request.form['instance'].strip()
    if not instance.startswith('http'):
        instance_url = f"https://{instance}"
    else:
        instance_url = instance

    # Register app with the user's instance
    app_reg_url = f"{instance_url}/api/v1/apps"
    data = {
        "client_name": "fair-debate-test1",
        "redirect_uris": url_for('callback', _external=True),
        "scopes": "profile",
        "website": "https://yourapp.example1.com"
    }
    resp = requests.post(app_reg_url, data=data)
    if resp.status_code != 200:
        return f"Failed to register app: {resp.text}"

    reg = resp.json()
    session['instance_url'] = instance_url
    session['client_id'] = reg['client_id']
    session['client_secret'] = reg['client_secret']

    print(f"{session['client_id']=}")
    print(f"{session['client_secret']=}")

    # Redirect user to Mastodon OAuth
    auth_url = (
        f"{instance_url}/oauth/authorize"
        f"?client_id={reg['client_id']}"
        f"&redirect_uri={data['redirect_uris']}"
        f"&response_type=code"
        f"&scope=profile"
    )
    return redirect(auth_url)

@app.route('/callback')
def callback():
    code = request.args.get('code')
    if not code:
        return "No code provided"

    instance_url = session['instance_url']
    client_id = session['client_id']
    client_secret = session['client_secret']
    redirect_uri = url_for('callback', _external=True)

    # Exchange code for access token
    token_url = f"{instance_url}/oauth/token"
    data = {
        "client_id": client_id,
        "client_secret": client_secret,
        "grant_type": "authorization_code",
        "code": code,
        "redirect_uri": redirect_uri,
        "scope": "profile"
    }
    resp = requests.post(token_url, data=data)
    if resp.status_code != 200:
        return f"Failed to get token: {resp.text}"

    token = resp.json()['access_token']

    # Fetch user info
    headers = {"Authorization": f"Bearer {token}"}
    account_url = f"{instance_url}/api/v1/accounts/verify_credentials"
    user_resp = requests.get(account_url, headers=headers)
    if user_resp.status_code != 200:
        return f"Failed to get user info: {user_resp.text}"

    user_info = user_resp.json()
    # Here you would create or log in the user in your app's database

    return f"Hello, {user_info['username']}@{instance_url.replace('https://','')}! Signup successful."

if __name__ == '__main__':
    app.run(debug=True)
